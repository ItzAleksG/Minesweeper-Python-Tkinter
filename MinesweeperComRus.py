import tkinter as tk # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
from tkinter import ttk # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–æ–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é
from idlelib.tooltip import Hovertip # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–π –Ω–∞–¥–ø–∏—Å–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–π

from random import randint # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
from threading import Thread # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø—Ä–∏—Ä—ã–≤–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
from time import sleep # –ë–∏–±–ª–µ–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞/—Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è

ELEMENTS = { # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: –°–∏–º–≤–æ–ª—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            'mines': 'üí£', # –ú–∏–Ω—ã
            'flags': 'üö©', # –§–ª–∞–≥
            'fakeflags': 'X', # –§–ª–∞–≥ –±–µ–∑ –º–∏–Ω—ã
            'nothing': '', # –ù–∏—á–µ–≥–æ
            'emoji': { # –°–º–∞–π–ª–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
                'default': 'üôÇ', # –û–±—ã—á–Ω—ã–π
                'fail': 'üíÄ', # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
                'win': 'üòé' # –ü–æ–±–µ–¥–∞
            }
        }

COLORS = { # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: —Ü–≤–µ—Ç–∞
    'nums': { # –¶–≤–µ—Ç–∞ –¥–ª—è —Ü–∏—Ñ—Ä
        1: '#0000ff',
        2: '#008000',
        3: '#ff0000',
        4: '#00008b',
        5: '#8b0000',
        6: '#008b8b',
        7: '#000000',
        8: '#778899'
    },
    'flag': '#F23607', # –¶–≤–µ—Ç —Ñ–ª–∞–≥–∞
    'fakeflag': 'lightblue', # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Ñ–ª–∞–≥–∞ –±–µ–∑ –º–∏–Ω—ã –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
    'water': 'lightblue', # –¶–≤–µ—Ç –≤–æ–¥—ã –ø—Ä–∏ –ø–æ–±–µ–¥–µ
    'closed': ['#AAD751', '#A2D149'], # –¶–≤–µ—Ç–∞ –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ
    'opened': ['#E5C29F', '#E2B488'], # –¶–≤–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª–µ ['–ø—É—Å—Ç–∞—è', '—Å —Ü–∏—Ñ—Ä–æ–π']
    'background': '#87AF3A', # –§–æ–Ω –ø–æ–ª—è
    'panel': '#4A752C' # –§–æ–Ω –ø–∞–Ω–µ–ª–∏
}

DIFFICULTIES = { # –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            'easy': { # –ü—Ä–æ—Å—Ç–æ–π
                'name': 'Easy',
                'width': 10, # –î–ª–∏–Ω–∞ –ø–æ–ª—è
                'height': 8, # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
                'mines': 10 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
            },
            'medium': { # –°—Ä–µ–¥–Ω–∏–π
                'name': 'Medium',
                'width': 18, # –î–ª–∏–Ω–∞ –ø–æ–ª—è
                'height': 14, # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
                'mines': 40 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
            },
            'hard': { # –°–ª–æ–∂–Ω—ã–π
                'name': 'Hard',
                'width': 30, # –î–ª–∏–Ω–∞ –ø–æ–ª—è
                'height': 16, # –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
                'mines': 100 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
            }
        }

class Minesweeper():
    def __init__(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –∏–≥—Ä—ã
        self.root = tk.Tk() # –°–æ–∑–¥–∞–Ω–∏–µ
        self.root.title('Minesweeper') # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.root.resizable(0, 0) # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä
        self.root.config(bg=COLORS['panel']) # –ó–∞–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ (–ø–∞–Ω–µ–ª–∏)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        self.panel = tk.Frame(self.root, padx=15, pady=15, bg=COLORS['panel'])
        self.panel.grid(column=0, row=0)
        
        # –°—á—ë—Ç—á–∏–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∏–Ω
        self.mineCounter = tk.Label(self.panel, width=5)
        self.mineCounter.grid(column=0, row=0, padx=10)

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self.restartBtn = tk.Button(self.panel, text=ELEMENTS['emoji']['default'], font='helv36', width=4, height=2, cursor='hand2', command=lambda: self.restart())
        self.restartBtn.grid(column=1, row=0, padx=10)
        Hovertip(self.restartBtn, 'Restart', 200) # –í—ã–ø–∞–¥–∞—é—â–∞—è –Ω–∞–¥–ø–∏—Å—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏

        # –°–µ–∫—É–Ω–¥–æ–º–µ—Ä
        self.timeLabel = tk.Label(self.panel, text=f'‚è∞000', width=5)
        self.timeLabel.grid(column=2, row=0, padx=10)
        
        dif_var = tk.StringVar(value=[DIFFICULTIES[i]['name'] for i in DIFFICULTIES][0]) # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        self.difficulty = ttk.Combobox(self.root, values=[DIFFICULTIES[i]['name'] for i in DIFFICULTIES], textvariable=dif_var, width=10, state='readonly') # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.difficulty.grid(column=0, row=0, sticky='w', padx=10) # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        self.difficulty.bind("<<ComboboxSelected>>", lambda event: self.combobox_selected()) # –ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

        self.combobox_selected(False) # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
        self.create_board() # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è
        
        self.root.mainloop()
    
    def combobox_selected(self, combobox=True):
        ''' –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ '''
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if combobox: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑–æ–≤ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            selection = DIFFICULTIES[[i for i in DIFFICULTIES][[DIFFICULTIES[i]['name'] for i in DIFFICULTIES].index(self.difficulty.get())]] # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else: selection = DIFFICULTIES[[i for i in DIFFICULTIES][0]] # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

        self.width = selection['width'] # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–ª—è
        self.height = selection['height'] # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –ø–æ–ª—è
        self.mines = selection['mines'] # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ–≤—Å—Ç–≤–∞ –º–∏–Ω
        
        if combobox: self.restart() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    def restart(self):
        ''' –ó–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã '''
        self.timerOff = True # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        self.boardFrame.destroy() # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è
        self.timeLabel.config(text='‚è∞000') # –û–±–Ω—É–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        self.restartBtn.config(text=ELEMENTS['emoji']['default']) # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É
        self.create_board() # –í—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
    
    def create_board(self):
        ''' –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è '''
        self.board = [] # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫
        self.opened = [] # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
        self.withflag = [] # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: –ö–ª–µ—Ç–∫–∏ —Å —Ñ–ª–∞–≥–æ–º
        
        self.boardFrame = tk.Frame(self.root, padx=15, pady=15, bg=COLORS['background']) # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–¥ –ø–æ–ª–µ
        self.boardFrame.grid(column=0, row=1) # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–ª—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ—Å–π—Å–µ
        self.mineCounter.config(text=f'{ELEMENTS["flags"]}{"0"*(3-len(str(self.mines)))}{self.mines}') # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ–≤—Å—Ç–≤–∞ –º–∏–Ω –Ω–∞ –ø–∞–Ω–µ–ª—å
        
        self.boardBtns = [[tk.Button(self.boardFrame) for x in range(self.width)] for y in range(self.height)] # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        for y in range(self.height): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª–µ
            for x in range(self.width): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–æ–ª–µ
                self.boardBtns[y][x].config(command=lambda x=x, y=y: self.left_click(x, y), cursor='hand2', height=2, width=4,
                                            disabledforeground='black', fg=COLORS['flag'], bg=COLORS['closed'][(x+y)%2],
                                            relief=tk.FLAT, font='Courier 10', activebackground=COLORS['background']) # –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏
                self.boardBtns[y][x].grid(column=x, row=y) # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.boardBtns[y][x].bind("<Button-3>", lambda event, x=x, y=y: self.right_click(x, y)) # –ó–∞–¥–∞–Ω–∏–µ –±–∏–Ω–¥–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∞–≤—ã–º –∫–ª–∏–∫–æ–º
    
    def generate_board(self):
        ''' –°–æ–∑–¥–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª–µ –∏ –∑–∞–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ —Å –º–∏–Ω–∞–º–∏'''
        self.board = [[0 for _ in range(self.width)] for _ in range(self.height)] # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è –≤ —Å–ø–∏—Å–∫–µ
        
        for _ in range(self.mines): # –¶–∏–∫–ª –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω
            while True: # –í–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
                py = randint(0, self.height-1) # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                px = randint(0, self.width-1) # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                if self.opened[0] != (px, py) and self.board[py][px] != ELEMENTS['mines']: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∏–ª–∏ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π
                    if self.width*self.height-self.mines >= 9: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
                        lst = [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                        for dy in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
                            for dx in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                                lst.append((dx+px, dy+py)) # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ —Å –º–∏–Ω–æ–π
                        if self.opened[0] in lst: continue # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ —Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É –¥–ª—è –º–∏–Ω—ã
                    self.board[py][px] = ELEMENTS['mines'] # –î–µ–ª–∞–µ–º –∫–ª–µ—Ç–∫—É –º–∏–Ω–æ–π
                    break # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª
        
        for y in range(self.height): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            for x in range(self.width): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                if self.board[y][x] != ELEMENTS['mines']: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π
                    for dy in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
                        for dx in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                            if self.height > dy+y >= 0 and self.width > dx+x >= 0 and self.board[dy+y][dx+x] == ELEMENTS['mines']: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –∏ —á—Ç–æ –æ–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π
                                self.board[y][x] += 1 # –ü—Ä–∏–±–æ–≤–ª—è–µ–º 1 –∫ —á–∏—Å–ª—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    
    def reveal_cell(self, x: int, y: int):
        ''' –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–æ–∫ –±–µ–∑ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ '''
        for dy in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
            for dx in range(-1, 2): # –ü–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≥–∞–µ–º—ã—Ö [-1, 0, 1] –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                if self.width > dx+x >= 0 and self.height > dy+y >= 0 and self.boardBtns[dy+y][dx+x]['state'] != tk.DISABLED: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –∏ —á—Ç–æ –æ–Ω–∞ —É–∂–µ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞
                    self.left_click(x+dx, y+dy) # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    
    def left_click(self, x: int, y: int):
        ''' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –õ–ö–ú '''
        if (x, y) in self.withflag: return # –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å —Ñ–ª–∞–≥ —Ç–æ –æ—Ç–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è
        self.opened.append((x, y)) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
        if len(self.opened) == 1: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–ª–µ—Ç–∫–∞
            self.generate_board() # C–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ–ª–µ
            Thread(target = self.timer).start() # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        if self.board[y][x] == ELEMENTS['mines'] and (x, y) not in self.withflag: self.end(False) # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –∫–ª–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∏–Ω–æ–π, –∏–Ω–∞—á–µ –≤—ã–∑—ã–≤–∞—Ç—å –ø–ª–æ—Ö—É—é –∫–æ–Ω—Ü–æ–≤–∫—É
        else:
            self.boardBtns[y][x].config(state=tk.DISABLED, cursor='arrow', # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                                        text=self.board[y][x] if self.board[y][x] else ELEMENTS['nothing'], # –ó–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ
                                        bg=COLORS['opened'][1] if self.board[y][x] else COLORS['opened'][0], # –ó–∞–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∫–ª–µ—Ç–∫–∏
                                        disabledforeground=COLORS['nums'][self.board[y][x]] if self.board[y][x] in [i for i in COLORS['nums']] else 'black') # –ó–∞–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å–∏–º–≤–æ–ª–∞
            if self.board[y][x] == 0: self.reveal_cell(x, y) # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–±–æ—Ä–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫ –µ—Å–ª–∏ –≤–æ–∫—Ä—É–≥ —ç—Ç–æ–π –Ω–µ—Ç –º–∏–Ω
            if self.width*self.height-self.mines == len(self.opened): self.end(True) # –ü—Ä–æ–≤–µ–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã –ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏, –µ—Å–ª–∏ –¥–∞ —Ç–æ –≤—ã–∑–≤–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∞—è –∫–æ–Ω—Ü–æ–≤–∫–∞
    
    def right_click(self, x: int, y: int):
        ''' –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –ü–ö–ú '''
        if (x, y) not in self.withflag and (x, y) not in self.opened and self.boardBtns[y][x]['state'] != tk.DISABLED: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
            self.withflag.append((x, y)) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–ª–µ—Ç–æ–∫ —Å —Ñ–ª–∞–≥–æ–º
            self.boardBtns[y][x].config(text=ELEMENTS['flags']) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É
        elif (x, y) not in self.opened and self.boardBtns[y][x]['state'] != tk.DISABLED: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
            self.withflag.remove((x, y)) # –£–±–æ—Ä–∫–∞ –∫–ª–µ—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–µ—Ç–æ–∫ —Å —Ñ–ª–∞–≥–æ–º
            self.boardBtns[y][x].config(text='') # –£–±–æ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ —Å –∫–ª–µ—Ç–∫–∏
        self.mineCounter.config(text=f'{ELEMENTS["flags"]}{"0"*(3-len(str(self.mines-len(self.withflag))))}{self.mines-len(self.withflag)}') # –ò–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Ñ–ª–∞–≥–æ–≤
    
    def end(self, win: bool):
        ''' –ö–æ–Ω—Ü–æ–≤–∫–∞ –∏–≥—Ä–∞ '''
        self.timerOff = True # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        if win: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
            self.restartBtn.config(text=ELEMENTS['emoji']['win']) # –ó–∞–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            for y in range(self.height): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
                for x in range(self.width): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    self.boardBtns[y][x].config(text=ELEMENTS['nothing'], state=tk.DISABLED, cursor='arrow') # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
                    if self.board[y][x] != ELEMENTS['mines']: self.boardBtns[y][x]['bg'] = COLORS['water'] # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –±–µ–∑ –º–∏–Ω –≤–æ–¥–æ–π
        else: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
            self.restartBtn.config(text=ELEMENTS['emoji']['fail']) # –ó–∞–¥–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            for y in range(self.height): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
                for x in range(self.width): # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    self.boardBtns[y][x].config(state=tk.DISABLED, cursor='arrow') # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫
                    if self.board[y][x] == ELEMENTS['mines']: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –∫–ª–µ—Ç–∫–∞ –º–∏–Ω–∞
                        self.boardBtns[y][x].config(text=ELEMENTS['mines'], bg='red') # –ó–∞–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ –Ω–∞–¥–ø–∏—Å–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ —Å –º–∏–Ω–æ–π
                        if (x, y) in self.withflag: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞
                            self.boardBtns[y][x]['bg'] = 'yellow' # –∑–∞–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∂—ë–ª—Ç—ã–º
                    elif (x, y) in self.withflag: # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫–ª–µ—Ç–∫–∞ –±–µ–∑ –º–∏–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞
                        self.boardBtns[y][x].config(text=ELEMENTS['fakeflags'], bg=COLORS['fakeflag']) # –ü–æ–º–µ—Ç–∫–∞ –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –ª–∏—à–Ω–∏–π —Ñ–ª–∞–≥
    def timer(self):
        ''' –°–µ–∫—É–Ω–¥–æ–º–µ—Ä –¥–ª—è –∏–≥—Ä—ã '''
        sec = 0 # –ù—É–ª–µ–≤–∞—è —Å–µ–∫—É–Ω–¥–∞
        self.timerOff = False # –ù–µ –æ—Ç–∫–ª—é—á–∞—Ç—å —Ç–∞–π–º–µ—Ä
        while not self.timerOff: # –¶–∏–∫–ª –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –ø—Ä–∏ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
            sec += 1 # –ü—Ä–∏–±–æ–≤–ª—è–µ–º –µ–¥–µ–Ω–∏—Ü—É
            self.timeLabel.config(text=f'‚è∞{'0'*(3-len(str(sec)))}{sec}') # –í—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ —Ç–∞–±–ª–æ
            sleep(1) # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—Ä–æ–π–¥—ë—Ç 1 —Å–µ–∫—É–Ω–¥–∞

if __name__ == '__main__':
    Minesweeper()
